(defwindow window
  :monitor 0
  :geometry (geometry :anchor "top center" ; Values include top, center, bottom and left, center, right.
                      :x      "0"          ; Position of the window. Values may be provided in px or %.
                      :y      "0"          ; Will be relative to anchor.
                      :width  "101%"
                      :height "2.8%")
  :stacking  "fg"     ; Possible values: fg, bg, overlay, bottom.
  :exclusive "true"   ; Whether the compositor should reserve space for the window.
  :focusable "false"  ; This is necessary for any widgets that use the keyboard to work.
  (topbar :screen 0)
)

(defwidget topbar [screen]
  (box :class "topbar"
       :valign "center"
       :halign "center"
       :width  "100%"
       :height "2.2%"
    (clock)
    (battery)
    (system_resources)
    (_network :strength net :offline "󰤮" :excellent "󰤨" :good "󰤥" :okay "󰤢" :slow "󰤟")
    (_buttons :shutdown "poweroff" :reboot "reboot"
              :logout "loginctl kill-session self"
              :shutdown_icon "󰐦" :reboot_icon "󰜉" :logout_icon "󰍂") ; 
  )
)

; Battery
(defwidget battery []
  (box :class "battery"
    (label :class "battery percentage" :text "${EWW_BATTERY["BAT0"]["status"]}:")
    (label :class "battery percentage" :text "${EWW_BATTERY["BAT0"]["capacity"]}%")
  )
)

; RAM
(defwidget system_resources []
  (box :class "system_resources"
    (system_progress
      :css "cpu"
      :tip "CPU ${round(EWW_CPU.avg,0)}%"
      :data {round(EWW_CPU.avg, 0)} 
      :icon ""
    )
    (system_progress
      :css "ram"
      :tip "RAM ${round(EWW_RAM.used_mem / 1048576, 2)}MB"
      :data {round(EWW_RAM.used_mem_perc, 0)}
      :icon "󰍛"
    )
    (system_progress
      :css "temp"
      :tip "Temperature ${EWW_TEMPS["CORETEMP_PACKAGE_ID_0"]}°C"
      :data {round(EWW_TEMPS.CORETEMP_PACKAGE_ID_0, 0)} 
      :icon ""
    )
  )
)
(defwidget system_progress [data icon css tip] 
  (box 
    :class "progress" 
    (circular-progress
      :class css
      :value data
      :thickness 8
      :tooltip tip
      (overlay
        :valign "center"
        (label 
          :class "icon" 
          :text icon
        )
      )
    )
  )
)

(defpoll net :interval "100s"
  :initial `N/A`
  `nmcli -t -f SIGNAL,ACTIVE device wifi \
    | awk -F':' '{if($2=="yes")print$1}'`)

(defwidget _network [strength offline excellent good okay slow]
  (box :class "net-box"
       :space-evenly false
       :spacing 8
    (label :text {strength == "" ? offline :
      strength < 26 ? slow :
        strength < 51 ? okay :
          strength < 76 ? good : excellent})))

(defwidget _buttons [shutdown shutdown_icon reboot
                    reboot_icon logout logout_icon]
  (box :class "btns-box" :spacing 5
       :vexpand true :hexpand true
       :valign "end" :halign "end"
       :space-evenly false
    (button :onclick shutdown shutdown_icon)
    (button :onclick reboot reboot_icon)
    (button :onclick logout logout_icon)))

; Time & Date
(defvar left_rev false)
(defwidget clock []
  (eventbox :class "date button" :cursor "pointer"
    :onclick {left_rev ? "eww update left_rev=false" : "eww update left_rev=true"}
    (box :class "date" :space-evenly false :spacing 10
      (box :class "clock" :space-evenly false :spacing 3
        (label :class "clock hour" :text {formattime(EWW_TIME, "%I")})
        (label :class "clock ellipsis" :text ":")
        (label :class "clock minute" :text {formattime(EWW_TIME, "%M")})
      )
      (image :class "distro" :path "./distro-logos/nixos-original.svg" :image-width 15 :image-height 15) ; how to make this dynamic?
      (label :class "today" :text {formattime(EWW_TIME, "%a %b %d")})
    )
  )
)
